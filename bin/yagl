#!/usr/bin/env ruby
# yagl - Yet Another Generator Language
require 'rubygems'
require 'getoptlong'
require 'fileutils'
require 'pathname'
require 'erubis'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__)) + '/../lib'
require File.expand_path(File.dirname(__FILE__)) + '/../lib/yagl'

# yagl's own options. Almost eating our own dogfood.

# just get option cuke to pass for now
yagloptions = Yagl::OptionGroup.new
yagloptions << Yagl::Option.new('verbose', 'V', false, 'print out generated option usage')
yagloptions << Yagl::Option.new('pretend', nil, false, 'dry run, show what would have happened')
antioptions = Yagl::OptionGroup.new
antioptions << Yagl::Option.new('no-verbose', false, false, 'print out generated option usage')
antioptions << Yagl::Option.new('no-pretend', false, false, 'dry run, show what would have happened')


metayagl = Yagl::MetaOptionGroup.new
metayagl << yagloptions
metayagl << antioptions
yagl_array = []
metayagl.each do |opt|
 yagl_array << opt.to_a
end

opts = GetoptLong.new(*yagl_array)

include Yagl::SetOption::SetMethod
# set initial state (not verbose and not pretending)
antioptions.each do |opt|
  methods_from_option opt.long_option
end

# set passed options
begin
  opts.each do |opt, arg|
    methods_from_option opt
  end
rescue GetoptLong::InvalidOption => e
  die e.message
end


include FileUtils

# open file: Yaglfile
begin
  # important parsing going on here
  # require 'Yaglfile'
  src=''
  File.open('Yaglfile') do |f|
    src=f.read
  end
  eval src
rescue Exception => e
  die e.message
end


# fake out for cucumber yagl.feature

# options

templates = Yagl::OptionGroup.new('Template')
templates << Yagl::Option.new('ruby', nil, false, 'install the ruby template')
templates << Yagl::Option.new('ruby-19', false, false, 'install the ruby-19 template')

generals = Yagl::OptionGroup.new
generals << Yagl::Option.new('force', nil, false, "force overwriting files, don't ask")
generals << Yagl::Option.new('skip', nil, false, 'skip file if it exists')
generals << Yagl::Option.new('quiet', nil, false, 'runs quietly, no output')
generals << Yagl::Option.new('verbose', 'V', false, 'Show lots of output')
generals << Yagl::Option.new('version')
generals << Yagl::Option.new('pretend', nil, false, 'dry run, show what would have happened')
generals << Yagl::Option.new('debug', 'x', false, 'Show debugging output')
generals << Yagl::Option.new('help')

meta = Yagl::MetaOptionGroup.new
meta << templates
meta << generals


# target script (cmd)
cmd=(File.basename(Dir.pwd))
target=ARGV[0] + '/bin/' + cmd

discoverer=Yagl::Discoverer.new
template_root=discoverer.templates

erubus=File.read(File.expand_path(File.dirname(__FILE__)) +  '/../template/target.rb.eruby')
eruby = Erubis::Eruby.new(erubus)    # create Eruby object

File.open(target, "w+") do |f|
  f.write eruby.result(binding())
end

chmod(0755, target)
