#!/usr/bin/env ruby
# yagl - Yet Another Generator Language
require 'rubygems'
require 'getoptlong'
require 'fileutils'
require 'pathname'
require 'erubis'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__)) + '/../lib'
# require File.expand_path(File.dirname(__FILE__)) + '/../lib/yagl'
require 'yagl'

# yagl's own options. Almost eating our own dogfood.

# just get option cuke to pass for now
yagloptions = Yagl::OptionGroup.new
yagloptions << Yagl::Option.new('verbose', 'V', false, 'print out generated option usage')
yagloptions << Yagl::Option.new('pretend', nil, false, 'dry run, show what would have happened')
yagloptions << Yagl::Option.new('output', nil, true, 'output of yagl command')
yagloptions << Yagl::Option.new('source', nil, true, 'source erubis script')
yagloptions << Yagl::Option.new('load_path', nil, true, 'load path expression if needed')



metayagl = Yagl::MetaOptionGroup.new
metayagl << yagloptions

yagl_array = []
metayagl.each do |opt|
 yagl_array << opt.to_a
end

opts = GetoptLong.new(*yagl_array)

include Yagl::SetOption::SetMethod
# set initial state (not verbose and not pretending)
yagloptions.each do |opt|
  default_from_option opt.long_option
end

# set passed options
begin
  opts.each do |opt, arg|
    methods_from_option opt
    accessors_from_option opt, arg unless arg.blank?
  end
rescue GetoptLong::InvalidOption => e
  die e.message
end

# at this point, can process any passed options

include FileUtils
include Yagl::DSL::Commands

# target script (cmd)
cmd=(File.basename(Dir.pwd))

if output?
  target = output
else
  target=ARGV[0] + '/bin/' + cmd 
end

# fake out script tags for coming eval
def script(tag, &block)
end
include Yagl::DSL::MethodBody

# open file: Yaglfile
if File.exists?('Yaglfile') or File.exists?(cmd + '.ygl')
  # eventually take option parameter over these, else prefer Yaglfile
  srcfile = if File.exists?('Yaglfile')
    'Yaglfile'
  else
    cmd + '.ygl'
  end
  # begin
    # important parsing going on here
    src=''
    File.open(srcfile) do |f|
      src=f.read
    end
    eval src
    # build script's methods
    scr = Yagl::DSL::Script.new(src)
    create_methods!(scr.hash)
  # rescue Exception => e
  #   die e.message
  # end
else
  die 'No Yaglfile or ' + cmd + '.ygl found'
end

if verbose?
  Storage.each do |opt|
    puts opt.usage
  end
else
  puts 'not verbose'
end

# fake out for cucumber yagl.feature

# options

templates = Yagl::OptionGroup.new('Template')
templates << Yagl::Option.new('ruby', nil, false, 'install the ruby template')
templates << Yagl::Option.new('ruby-19', false, false, 'install the ruby-19 template')

generals = Yagl::OptionGroup.new
generals << Yagl::Option.new('force', nil, false, "force overwriting files, don't ask")
generals << Yagl::Option.new('skip', nil, false, 'skip file if it exists')
generals << Yagl::Option.new('quiet', nil, false, 'runs quietly, no output')
generals << Yagl::Option.new('verbose', 'V', false, 'Show lots of output')
generals << Yagl::Option.new('version')
generals << Yagl::Option.new('pretend', nil, false, 'dry run, show what would have happened')
generals << Yagl::Option.new('debug', 'x', false, 'Show debugging output')
generals << Yagl::Option.new('help')

meta = Yagl::MetaOptionGroup.new
# meta << templates
# meta << generals

yaglog = Yagl::OptionGroup.new('Standard')
Storage.each do |opt|
  yaglog << opt
end
meta << yaglog

discoverer=Yagl::Discoverer.new
template_root=discoverer.templates

if source?
  erubus = File.read(source)
else
  erubus=File.read(File.expand_path(File.dirname(__FILE__)) +  '/../template/target.rb.eruby')
end


eruby = Erubis::Eruby.new(erubus)    # create Eruby object
result = eruby.result(binding())

unless pretend?
  File.open(target, "w+") do |f|
    f.write result
  end 
  chmod(0755, target)
else
  puts "Would create: \n" + result if verbose?
end