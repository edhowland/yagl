# Yaglfile
# yagl's own Yaglfile (dog food)
# defines options and templates

option :source, [:argument], 'The source erubus template to use'
option :output, [:argument], 'The output file'
option :yaglfile, [:argument], 'The Yagl source file (Default: Yaglfile, dir.ygl)'
option :verbose, :V, 'Show lots of output'
option :quiet, 'Run quietly, show no output'
option :pretend, 'Run but do not make any changes'
option :force, 'Force overwrite of existing files'
option :skip, :S, 'Skip files that already exist'
option :load_path, [:argument], 'prepend LOAD_PATH to $LOAD_pATH'
option :help

# script task :autorun is the default. Any other
# name will be output at a named place in the erubus template:
# script :builder do ... end
# <%= builder %>

script :autorun do 
  def vputs(msg, *args)
    puts msg + (args.empty? ? '' : ': ' + args.join(' ')) if verbose?
  end
  def qputs(*args)
    puts(*args) unless quiet?
  end
  
  def conditionally_execute(cmd, dfile, *args, &block)
    if cmd == :chmod
      vputs 'changing mode', args[0]
      vputs "pretending" if pretend?
      vputs "skipping" if skip?
      self.send cmd, *args unless pretend? or skip?
    else
      if (File.exists? args.last and !force?) or File.directory? args.last
        qputs "exists " + dfile
      else
        qputs((skip? ? 'skipping' : "create") + " #{dfile}")
        if block_given?
          yield args
        else
          vputs "pretending" if pretend?
          vputs "skipping" if skip?
          self.send cmd, *args unless pretend? or skip?
        end
      end
    end
  end
  
  
  die $usage if help?
  
  # load path forced for now
  load_path='../lib'
  load_path!
  
  destination = ARGV[0]
  
  cmd=(File.basename(Dir.pwd))
  if output?
    target = output
  else
    target=ARGV[0] + '/bin/' + cmd 
  end
  vputs 'target', target
  

  yaglsrc = File.exists?('Yaglfile') ? 'Yaglfile' : cmd + '.ygl'
  yaglsrc = yaglfile? ? yaglfile :  yaglsrc
  die "Yaglfile and #{yaglsrc} do not exist" unless File.exists?(yaglsrc)
  vputs 'Yagl source', yaglsrc
  
  discoverer=Yagl::Discoverer.new
  template_root=discoverer.templates
  vputs 'Template', template_root
end

script :parse_yaglfile do
  src=''
  scriptsd=File.expand_path(File.join(File.dirname(__FILE__), *%w{.. lib scripts}))
  vputs 'searching for yagl scripts in', scriptsd
  Dir[scriptsd + '**/*.ygl'].each do |file|
    vputs 'importing', file
    src = File.read(file)
    eval src
    scr = Yagl::DSL::Script.new(src)
    create_methods!(scr.hash)
  end

  src=File.read(yaglsrc)
  eval src
  scr = Yagl::DSL::Script.new(src)
  create_methods!(scr.hash)

  meta = Yagl::MetaOptionGroup.new
  yaglog = Yagl::OptionGroup.new
  Storage.each do |opt|
    yaglog << opt
  end
  meta << yaglog
end

# this is the main processing loop
script :process_templates do
  # source = source? ? source : template_root + '/yagl.eruby'
  # die source + 'does not exist' unless File.exists?(source)
  # vputs 'ERubis source', source
  
  # Dir.chdir(template_root) do |path|
  #   vputs 'in', path
    Dir.glob template_root + '/**/*' do |file|
      vputs 'current file', file
      src=file  #File.join(path,file)
      pname = Pathname.new src
      src_parts = pname.parts
      src_parts.shift # shift off template_root
      dpath = Pathname.new destination
      dest = dpath.join(*src_parts).to_s
      # dest=File.join(dest, file)
      vputs "src, dest", src, dest
      if File.directory? src
        conditionally_execute :mkdir_p, dest, dest
      else
        stat = File.stat src
        # if an eruby or erb file, translate it
        if pname.match_final_ext(%w{eruby erb})
          eruby = Erubis::Eruby.new(File.read(src))    # create Eruby object
          result = eruby.result(binding())
          dname = pname.strip_final_ext
          dparts = src_parts
          dparts.pop
          
          dest = dpath.join(*dparts, dname).to_s
          vputs 'translating', src, 'to', dest
          conditionally_execute :write, dest, dest do |args|
            File.open(args.last, 'w+') do |f|
              f.write(result)
            end
          end
        else
          conditionally_execute :cp, dest, src, dest
        end
        conditionally_execute :chmod, dest, stat.mode, dest
      end
    end
  # end  

  vputs 'Done'
end

