# Yaglfile
# yagl's own Yaglfile (dog food)
# defines options and templates

option :source, [:argument], 'The source erubus template to use'
option :output, [:argument], 'The output file'
option :yaglfile, [:argument], 'The Yagl source file (Default: Yaglfile, dir.ygl)'
option :verbose, :V, 'Show lots of output'
option :pretend, 'Run but do not make any changes'
option :load_path, [:argument], 'prepend LOAD_PATH to $LOAD_pATH'
option :help

# script task :autorun is the default. Any other
# name will be output at a named place in the erubus template:
# script :builder do ... end
# <%= builder %>

script :autorun do 
  def vputs(msg, *args)
    puts msg + args.join(' ') if verbose?
  end
  
  die $usage if help?
  
  # load path forced for now
  load_path='../lib'
  load_path!
  
  cmd=(File.basename(Dir.pwd))
  if output?
    target = output
  else
    target=ARGV[0] + '/bin/' + cmd 
  end
  vputs 'target: ', target
  

  yaglsrc = File.exists?('Yaglfile') ? 'Yaglfile' : cmd + '.ygl'
  yaglsrc = yaglfile? ? yaglfile :  yaglsrc
  die yaglsrc + ' does not exist' unless File.exists?(yaglsrc)
  vputs 'Yagl source: ', yaglsrc
  
  discoverer=Yagl::Discoverer.new
  template_root=discoverer.templates
  vputs 'Template: ', template_root
  
  source = source? ? source : template_root + '/yagl.eruby'
  die source + 'does not exist' unless File.exists?(source)
  vputs 'ERubis source ', source
end

script :parse_yaglfile do
  src=''
  File.open(yaglsrc) do |f|
    src=f.read
  end
  eval src
  scr = Yagl::DSL::Script.new(src)
  create_methods!(scr.hash)

  meta = Yagl::MetaOptionGroup.new
  yaglog = Yagl::OptionGroup.new
  Storage.each do |opt|
    yaglog << opt
  end
  meta << yaglog
end

script :process_templates do
  eruby = Erubis::Eruby.new(File.read(source))    # create Eruby object
  result = eruby.result(binding())

  vputs 'Writing ', target
  
  unless pretend?
    File.open(target, "w+") do |f|
      f.write result
    end 
    chmod(0755, target)
  end
  vputs 'Done'
end

